-- DROP PROCEDURE ADD_ATTRIBUTE_TO_ALL_DOCUMENT_TYPES IF EXISTS;
-- DROP PROCEDURE ADD_ATTRIBUTE_TO_DOCUMENT_TYPE IF EXISTS;
-- DROP PROCEDURE ADD_DOCUMENT IF EXISTS;
-- DROP PROCEDURE ADD_ATTRIBUTE_VALUE_TO_DOCUMENT IF EXISTS;

-- DROP TABLE DOCUMENT_TYPE IF EXISTS CASCADE;
-- DROP TABLE DOCUMENT IF EXISTS CASCADE;
-- DROP TABLE ATTRIBUTE_VALUE IF EXISTS CASCADE;
-- DROP TABLE ATTRIBUTE IF EXISTS CASCADE;
-- DROP TABLE DOCUMENT_TYPE_ATTRIBUTE IF EXISTS CASCADE;

CREATE TABLE DOCUMENT_TYPE (
  DOCUMENT_TYPE_ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  CODE VARCHAR(30) NOT NULL);

CREATE TABLE DOCUMENT (
  DOCUMENT_ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
  DOCUMENT_TYPE_ID INT NOT NULL,
  NAME VARCHAR(80) NOT NULL);

CREATE TABLE ATTRIBUTE_VALUE(
  ATTRIBUTE_VALUE_ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
  ATTRIBUTE_ID INT NOT NULL,
  VALUE VARCHAR(100) NULL,
  DOCUMENT_ID INT NOT NULL);

CREATE TABLE ATTRIBUTE (
  ATTRIBUTE_ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  CODE VARCHAR(30) NOT NULL);

CREATE TABLE DOCUMENT_TYPE_ATTRIBUTE (
  DOCUMENT_TYPE_ATTRIBUTE_ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,
  ATTRIBUTE_ID INT NOT NULL,
  DOCUMENT_TYPE_ID INT NOT NULL);

ALTER TABLE DOCUMENT_TYPE ADD CONSTRAINT DOCUMENT_TYPE_ID_UNQ UNIQUE (DOCUMENT_TYPE_ID);
ALTER TABLE DOCUMENT_TYPE ADD CONSTRAINT DOCUMENT_TYPE_CODE_UNQ UNIQUE (CODE);
ALTER TABLE DOCUMENT_TYPE ADD CONSTRAINT DOCUMENT_TYPE_NAME_INQ UNIQUE (NAME);

ALTER TABLE ATTRIBUTE ADD CONSTRAINT ATTRIBUTE_ID_UNQ UNIQUE (ATTRIBUTE_ID);
ALTER TABLE ATTRIBUTE ADD CONSTRAINT ATTRIBUTE_CODE_UNQ UNIQUE (CODE);
ALTER TABLE ATTRIBUTE ADD CONSTRAINT ATTRIBUTE_NAME_UNQ UNIQUE (NAME);

ALTER TABLE DOCUMENT ADD CONSTRAINT DOCUMENT_ID_UNQ UNIQUE(DOCUMENT_ID);
ALTER TABLE DOCUMENT ADD CONSTRAINT DOCUMENT_NAME_DOCUMENT_TYPE_ID_UNQ UNIQUE (NAME, DOCUMENT_TYPE_ID);

ALTER TABLE ATTRIBUTE_VALUE ADD CONSTRAINT ATTRIBUTE_VALUE_ID_UNQ UNIQUE (ATTRIBUTE_VALUE_ID);
ALTER TABLE ATTRIBUTE_VALUE ADD CONSTRAINT ATTRIBUTE_VALUE_ID_DOCUMENT_ID_UNQ UNIQUE (ATTRIBUTE_VALUE_ID, DOCUMENT_ID);

ALTER TABLE DOCUMENT_TYPE_ATTRIBUTE ADD CONSTRAINT DOCUMENT_TYPE_ATTRIBUTE_ID_UNQ UNIQUE (DOCUMENT_TYPE_ATTRIBUTE_ID);
ALTER TABLE DOCUMENT_TYPE_ATTRIBUTE ADD CONSTRAINT DOCUMENT_TYPE_ATTRIBUTE_DOCUMENT_TYPE_ID_ATTRIBUTE_ID_UNQ UNIQUE (DOCUMENT_TYPE_ID, ATTRIBUTE_ID);

ALTER TABLE DOCUMENT
  ADD FOREIGN KEY (DOCUMENT_TYPE_ID)
REFERENCES DOCUMENT_TYPE(DOCUMENT_TYPE_ID);

ALTER TABLE ATTRIBUTE_VALUE
  ADD FOREIGN KEY (ATTRIBUTE_ID)
REFERENCES ATTRIBUTE(ATTRIBUTE_ID);

ALTER TABLE ATTRIBUTE_VALUE
  ADD FOREIGN KEY (DOCUMENT_ID)
REFERENCES DOCUMENT(DOCUMENT_ID);

ALTER TABLE DOCUMENT_TYPE_ATTRIBUTE
  ADD FOREIGN KEY (DOCUMENT_TYPE_ID)
REFERENCES DOCUMENT_TYPE(DOCUMENT_TYPE_ID);

ALTER TABLE DOCUMENT_TYPE_ATTRIBUTE
  ADD FOREIGN KEY (ATTRIBUTE_ID)
REFERENCES ATTRIBUTE(ATTRIBUTE_ID);

-- CREATE TRIGGER DOCUMENT_TYPE_DLT_DOCUMENT_TYPE_ATTRIBUTE_TR
--   AFTER DELETE ON DOCUMENT_TYPE
--   REFERENCING OLD AS oldrow FOR EACH ROW
--   DELETE FROM DOCUMENT_TYPE_ATTRIBUTE WHERE DOCUMENT_TYPE_ID = oldrow.DOCUMENT_TYPE_ID;
--
-- CREATE TRIGGER ATTRIBUTE_DLT_DOCUMENT_TYPE_ATTRIBUTE_TR
--   AFTER DELETE ON ATTRIBUTE
--   REFERENCING OLD AS oldrow FOR EACH ROW
--   DELETE FROM DOCUMENT_TYPE_ATTRIBUTE WHERE ATTRIBUTE_ID = oldrow.ATTRIBUTE_ID;

-- CREATE PROCEDURE ADD_ATTRIBUTE_TO_DOCUMENT_TYPE(IN code_attribute VARCHAR(30), IN code_document_type VARCHAR(30))
-- MODIFIES SQL DATA
--   BEGIN ATOMIC
--     DECLARE id_attribute INT;
--     DECLARE id_document_type INT;
--     SET (id_attribute) = (SELECT ATTRIBUTE_ID FROM ATTRIBUTE WHERE CODE = code_attribute);
--     SET (id_document_type) = (SELECT DOCUMENT_TYPE_ID FROM DOCUMENT_TYPE WHERE CODE = code_document_type);
--     INSERT INTO DOCUMENT_TYPE_ATTRIBUTE (ATTRIBUTE_ID, DOCUMENT_TYPE_ID) VALUES (id_attribute, id_document_type);
--   END;
-- ;
--
-- CREATE PROCEDURE ADD_ATTRIBUTE_TO_ALL_DOCUMENT_TYPES(IN code_attribute VARCHAR(30))
-- MODIFIES SQL DATA
--   BEGIN ATOMIC
--     DECLARE id_attribute INT;
--     DECLARE id_document_type INT;
--     SET (id_attribute) = (SELECT ATTRIBUTE_ID FROM ATTRIBUTE WHERE CODE = code_attribute);
--     for_label: FOR SELECT DOCUMENT_TYPE_ID FROM DOCUMENT_TYPE DO
--       SET id_document_type = DOCUMENT_TYPE_ID;
--       INSERT INTO DOCUMENT_TYPE_ATTRIBUTE (ATTRIBUTE_ID, DOCUMENT_TYPE_ID) VALUES (id_attribute, id_document_type);
--     END FOR for_label;
--  END;
-- ;
-- CREATE PROCEDURE ADD_ATTRIBUTE_VALUE_TO_DOCUMENT(IN code_attribute VARCHAR(30), IN value_attribute_value VARCHAR(100), IN name_document VARCHAR(80))
-- MODIFIES SQL DATA
--   BEGIN ATOMIC
--     DECLARE id_attribute INT;
--     DECLARE id_document INT;
--     SET (id_attribute) = (SELECT ATTRIBUTE_ID FROM ATTRIBUTE WHERE CODE = code_attribute);
--     SET (id_document) = (SELECT DOCUMENT_ID FROM DOCUMENT WHERE NAME = name_document);
--     INSERT INTO ATTRIBUTE_VALUE (ATTRIBUTE_ID, DOCUMENT_ID, VALUE) VALUES (id_attribute, id_document, value_attribute_value);
--   END;
-- ;
-- CREATE PROCEDURE ADD_DOCUMENT(IN name_document VARCHAR(80), IN code_document_type VARCHAR(30))
-- MODIFIES SQL DATA
--   BEGIN ATOMIC
--     DECLARE id_document_type INT;
--     SET (id_document_type) = (SELECT DOCUMENT_TYPE_ID FROM DOCUMENT_TYPE WHERE CODE = code_document_type);
--     INSERT INTO DOCUMENT (NAME, DOCUMENT_TYPE_ID) VALUES (name_document, id_document_type);
--   END;
-- ;